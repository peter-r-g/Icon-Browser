using Editor;
using System;
using System.Collections.Generic;
using System.IO;

namespace IconBrowser;

/// <summary>
/// A browser to see all material icons available in S&amp;box tools.
/// </summary>
[Dock( "Editor", "Icon Browser", MaterialIcon.ImageSearch )]
public sealed class IconBrowser : Widget
{
	/// <summary>
	/// The widget that contains all of the icons.
	/// </summary>
	private ListView IconList { get; set; } = null!;
	/// <summary>
	/// The widget that controls the icon size selection.
	/// </summary>
	private ToolButton IconSizeSelector { get; set; } = null!;

	/// <summary>
	/// The current size of the icons.
	/// </summary>
	private float IconSize { get; set; } = IconSizes.Large;
	/// <summary>
	/// The current filter being used on the icons.
	/// </summary>
	private string? CurrentFilter { get; set; }

	public IconBrowser( Widget parent ) : base( parent )
	{
		MaterialIconData.LoadFrom( "fonts/mat_codepoints.txt" );

		SetupWindow();
		Show();
	}

	/// <summary>
	/// Constructs the browser.
	/// </summary>
	private void SetupWindow()
	{
		MinimumSize = new Vector2( 192, 192 );

		SetLayout( LayoutMode.TopToBottom );

		// Toolbar.
		{
			var toolBar = Layout.AddRow();

			var iconFilter = toolBar.Add( new LineEdit() );
			iconFilter.FixedHeight = 20;
			iconFilter.PlaceholderText = "Filter Icons...";
			iconFilter.TextChanged += FilterIconsTextChanged;
			toolBar.AddSpacingCell( 8 );

			IconSizeSelector = toolBar.Add( new ToolButton( "Icon Size", MaterialIcon.GridView, this ) );
			IconSizeSelector.MouseLeftPress = IconSizeContextMenu;

			var iconDump = toolBar.Add( new ToolButton( "Dump icons to C#", MaterialIcon.Download, this ) );
			iconDump.MouseLeftPress = OpenDumpIconDialog;

			Layout.AddSeparator();
			Layout.AddSpacingCell( 8 );
		}

		IconList = Layout.Add( new ListView() );
		IconList.ItemSize = new Vector2( 192, 192 );
		IconList.ItemPaint = PaintIcon;
		IconList.ItemContextMenu = IconContextMenu;

		BuildList( string.Empty );
	}

	/// <summary>
	/// Event receiver for when the filter text has changed.
	/// </summary>
	/// <param name="str">The new text in the entry.</param>
	private void FilterIconsTextChanged( string str )
	{
		BuildList( str );
	}

	/// <summary>
	/// Builds the context menu for when you want to change the icon size.
	/// </summary>
	private void IconSizeContextMenu()
	{
		var menu = new Menu( this );

		var smallIconText = "Small Icons" + (IconSize == IconSizes.Small ? " (Selected)" : string.Empty);
		var mediumIconText = "Medium Icons" + (IconSize == IconSizes.Medium ? " (Selected)" : string.Empty);
		var largeIconText = "Large Icons" + (IconSize == IconSizes.Large ? " (Selected)" : string.Empty);

		menu.AddOption( smallIconText, MaterialIcon.Apps, () => IconSize = IconSizes.Small ); ;
		menu.AddOption( mediumIconText, MaterialIcon.GridOn, () => IconSize = IconSizes.Medium );
		menu.AddOption( largeIconText, MaterialIcon.GridView, () => IconSize = IconSizes.Large );

		menu.OpenAt( IconSizeSelector.ScreenRect.BottomLeft, false );
	}

	/// <summary>
	/// Opens a file dialog to choose where to dump the generated C# file.
	/// </summary>
	private static void OpenDumpIconDialog()
	{
		var dialog = new FileDialog( null );
		dialog.SetModeSave();
		dialog.SetNameFilter( "*.cs" );

		if ( !dialog.Execute() )
			return;

		var filePath = dialog.SelectedFile;
		if ( !filePath.EndsWith( ".cs" ) )
			filePath += ".cs";

		DumpIconsToCsFile( filePath );
		Utility.OpenFileFolder( filePath );
	}

	/// <summary>
	/// Generates a C# file containing all of the <see cref="MaterialIconData"/> that are loaded.
	/// </summary>
	/// <param name="filePath">The path to the file to write into.</param>
	private static void DumpIconsToCsFile( string filePath )
	{
		using var fs = File.Open( filePath, FileMode.Create );
		using var writer = new StreamWriter( fs );

		writer.WriteLine( "/// <auto-generated/>" );
		writer.WriteLine();
		writer.WriteLine( "/// <summary>" );
		writer.WriteLine( "/// Contains all available icons in S&amp;box." );
		writer.WriteLine( "/// </summary>" );
		writer.WriteLine( "/// <remarks>" );
		writer.WriteLine( "/// All icons sourced from Material Design Icons Font - https://materialdesignicons.com/ - in accordance of" );
		writer.WriteLine( "/// https://github.com/Templarian/MaterialDesign/blob/master/LICENSE." );
		writer.WriteLine( "/// Codepoints used to generate this file can be found at" );
		writer.WriteLine( "/// https://github.com/google/material-design-icons/blob/master/font/MaterialIcons-Regular.codepoints" );
		writer.WriteLine( "/// </remarks>" );
		writer.WriteLine( "public static class MaterialIcon" );
		writer.WriteLine( '{' );

		foreach ( var iconData in MaterialIconData.All )
			writer.WriteLine( $"\tpublic const string {iconData.CsName} = \"{iconData.IconName}\";" );

		writer.WriteLine( '}' );
		writer.Close();
	}

	/// <summary>
	/// Rebuilds the icon list with a filter.
	/// </summary>
	/// <param name="filter">The filter to apply. Pass <see cref="string.Empty"/> for no filter.</param>
	private void BuildList( string filter )
	{
		filter = filter.ToLower();
		if ( CurrentFilter == filter )
			return;

		IconList.Clear();

		CurrentFilter = filter;

		var passed = new List<MaterialIconData>();

		// Filter icons.
		foreach ( var iconData in MaterialIconData.All )
		{
			if ( string.IsNullOrEmpty( filter ) )
			{
				passed.Add( iconData );
				continue;
			}

			if ( iconData.Name.ToLower().Contains( filter ) )
				passed.Add( iconData );
		}

		// Sort alphabetically.
		passed.Sort( (firstItem, secondItem) =>
		{
			return StringComparer.OrdinalIgnoreCase.Compare( firstItem.Name, secondItem.Name );
		} );

		foreach ( var iconName in passed )
			IconList.AddItem( iconName );
	}

	/// <summary>
	/// Builds the context menu for when you right click an icon.
	/// </summary>
	/// <param name="obj">The icon that was right clicked.</param>
	private void IconContextMenu( object obj )
	{
		if ( obj is not MaterialIconData iconData )
			return;

		var menu = new Menu();

		menu.AddOption( "Copy Name", null, () => Clipboard.Copy( iconData.Name ) );
		menu.AddOption( "Copy C# Name", null, () => Clipboard.Copy( iconData.CsName ) );
		menu.AddOption( "Copy S&&box Name", null, () => Clipboard.Copy( iconData.IconName ) );

		menu.OpenAtCursor();
	}

	/// <summary>
	/// Paints an icon item.
	/// </summary>
	/// <param name="widget">The widget that represents the icon.</param>
	private void PaintIcon( VirtualWidget widget )
	{
		if ( widget.Object is not MaterialIconData iconData )
			return;

		Paint.ClearBrush();
		Paint.ClearPen();

		if ( Paint.HasMouseOver )
		{
			ToolTip = iconData.IconName;
			Paint.SetBrush( Theme.Selection.WithAlpha( 0.6f ) );
			Paint.DrawRect( widget.Rect );
		}

		// Draw icon.
		Paint.SetPen( Theme.White );
		Paint.DrawIcon( widget.Rect, iconData.IconName, IconSize, TextFlag.Center );

		// Draw human readable name.
		Paint.SetFont( "Poppins", 16 );
		var borderedRect = new Rect( widget.Rect.Position, widget.Rect.Size - 20 );
		var iconText = iconData.Name
			.Truncate( borderedRect, "...", TextFlag.CenterBottom );
		Paint.DrawText( widget.Rect, iconText, TextFlag.CenterBottom );
	}
}
